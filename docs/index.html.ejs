<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="stylesheet" href="98.css"></style>
  <link rel="stylesheet" href="docs.css"></style>
  <link rel="stylesheet" href="vs.css"></style>
</head>
<body>
  <aside>
    <ul class="treeview">
      <li><a href="#intro">Intro</a></li>
      <li>
        <a href="#components">Components</a>
        <ul>
          <li><a href="#button">Button</a></li>
          <li><a href="#checkbox">Checkbox</a></li>
          <li><a href="#option-button">OptionButton</a></li>
          <li><a href="#fieldset">Fieldset</a></li>
          <li><a href="#text-box">TextBox</a></li>
          <li><a href="#multiline-text-box">Multiline TextBox</a></li>
          <li>
            <a href="#dialog">Dialog</a>
            <ul>
              <li><a href="#menubar">Menubar</a></li>
              <li><a href="#controls">Controls</a></li>
              <li><a href="#all-together">All together</a></li>
            </ul>
          </li>
          <li><a href="#treeview">TreeView</a></li>
        </ul>
      </li>
      <li><a href="#extras">Extras</a></li>
    </ul>
  </aside>

  <main>
    <h1>98.css</h1>
    <hr>
    <p>A design system for building faithful recreations of old UIs.</p>

    <h2 id="intro">Intro</h2>
    <p>
      98.css is a CSS library for building interfaces that look like Windows 98.
    </p>

    <div class="dialog" style="margin: 32px; width: 250px">
      <div class="menubar">
        <div class="menubar-title">
          My First VB4 Program
        </div>

        <div class="menubar-controls">
          <button aria-label="Minimize"></button>
          <button aria-label="Maximize"></button>
          <button aria-label="Close"></button>
        </div>
      </div>
      <div class="dialog-body">
        <p>Hello, world!</p>
        <section class="field-row align-right">
          <button>OK</button>
          <button>Cancel</button>
        </section>
      </div>
    </div>

    <p>
      This library relies on the usage of <strong>semantic HTML</strong>. To make a button, you'll need
      to use a <code>&lt;button&gt;</code>. Input elements require labels. Icon buttons rely on
      <code>aria-label</code>. This page will guide you through that process, but accessibility is a primary
      goal of this project.
    </p>

    <p>
      You can override many of the styles of your elements while maintaining the appearance provided by
      this library. Need more padding on your buttons? Go for it. Need to add some color to your input labels?
      Be our guest.
    </p>

    <p>
      <strong>This library does not contain any JavaScript</strong>, it merely styles your HTML with some CSS.
      This means 98.css is compatible with your frontend framework of choice.
    </p>

    <p>You can install 98.css from the GitHub releases page, or from npm.</p>
    <pre><code>npm install 98.css</code></pre>

    <h2 id="components">Components</h2>

    <section class="component">
      <h3 id="button">Button</h3>
      <div>
        <blockquote>
          A <em>command button</em>, also referred to as a push button, is a control
          that causes the application to perform some action when the user clicks it.

          <footer>&mdash; Microsoft Windows User Experience, 8.1</footer>
        </blockquote>

        <p>
          A standard button measures 75px wide and 23px tall, with a raised outer and inner border.
          They are given 12px of horizontal padding by default.
        </p>

        <%- example(`<button>Click me</button>`) %>

        <p>
          When buttons are clicked, the raised borders become sunken.
          The following button is simulated to be in the pressed (active) state.
        </p>

        <% /* [[ ... ]] is used to render contents that
              will not appear in the "Show code" section */
        %>
        <%- example(`<button[[ class="active"]]>I am being pressed</button>`) %>

        <p>
          Disabled buttons maintain the same raised border, but have a "washed out"
          appearance in their label.
        </p>

        <%- example(`<button disabled>I cannot be clicked</button>`) %>

        <p>
          Button focus is communicated with a dotted border, set 4px within the contents of the button.
          The following example is simulated to be focused.
        </p>

        <%- example(`<button[[ class="focused"]]>I am focused</button>`) %>
      </div>
    </section>

    <section class="component">
      <h3 id="checkbox">Checkbox</h3>
      <div>
        <blockquote>
          A <em>check box</em> represents an independent or non-exclusive choice.
          <footer>&mdash; Microsoft Windows User Experience, 8.3</footer>
        </blockquote>

        <p>
          Checkboxes are represented with a sunken panel, populated with a "check" icon when
          selected, next to a label indicating the choice.
        </p>

        <p>
          Note: You <strong>must</strong> include a corresponding label <strong>after</strong>
          your checkbox, using the <code>&lt;label&gt;</code> element with a <code>for</code> attribute
          pointed at the <code>id</code> of your input. This ensures the checkbox is easy to use with
          assistive technologies, on top of ensuring a good user experience for all (navigating with the tab key,
          being able to click the entire label to select the box).
        </p>

        <%- example(`
          <input type="checkbox" id="example${getNewId()}">
          <label for="example${getCurrentId()}">This is a checkbox</label>
        `) %>

        <p>
          Checkboxes can be selected and disabled with the standard <code>checked</code> and <code>disabled</code>
          attributes.
        </p>

        <p>
          When grouping inputs, wrap each input in a container with the <code>field-row</code> class. This ensures
          a consistent spacing between inputs.
        </p>

        <%- example(`
          <div class="field-row">
            <input checked type="checkbox" id="example${getNewId()}">
            <label for="example${getCurrentId()}">I am checked</label>
          </div>
          <div class="field-row">
            <input disabled type="checkbox" id="example${getNewId()}">
            <label for="example${getCurrentId()}">I am inactive</label>
          </div>
          <div class="field-row">
            <input checked disabled type="checkbox" id="example${getNewId()}">
            <label for="example${getCurrentId()}">I am inactive but still checked</label>
          </div>
        `) %>
      </div>
    </section>

    <section class="component">
      <h3 id="option-button">OptionButton</h3>
      <div>
        <blockquote>
          An <em>option button</em>, also referred to as a radio button, represents a single
          choice within a limited set of mutually exclusive choices. That is, the user can choose only
          one set of options.

          <footer>&mdash; Microsoft Windows User Experience, 8.2</footer>
        </blockquote>

        <p>
          Option buttons can be grouped by specifying a shared <code>name</code> attribute on each
          input. Just as before: when grouping inputs, wrap each input in a container with the
          <code>field-row</code> class to ensure a consistent spacing between inputs.
        </p>

        <%- example(`
          <div class="field-row">
            <input id="radio${getNewId()}" type="radio" name="first-example">
            <label for="radio${getCurrentId()}">Yes</label>
          </div>
          <div class="field-row">
            <input id="radio${getNewId()}" type="radio" name="first-example">
            <label for="radio${getCurrentId()}">No</label>
          </div>
        `) %>

        <p>
          Option buttons can also be <code>checked</code> and <code>disabled</code> with their corresponding
          HTML attributes.
        </p>

        <%- example(`
          <div class="field-row">
            <input id="radio${getNewId()}" type="radio" name="second-example">
            <label for="radio${getCurrentId()}">Peanut butter should be smooth</label>
          </div>
          <div class="field-row">
            <input checked disabled id="radio${getNewId()}" type="radio" name="second-example">
            <label for="radio${getCurrentId()}">I understand why people like crunchy peanut butter</label>
          </div>
          <div class="field-row">
            <input disabled id="radio${getNewId()}" type="radio" name="second-example">
            <label for="radio${getCurrentId()}">Crunchy peanut butter is good</label>
          </div>
        `) %>
      </div>
    </section>
  </main>
</body>
</html>
